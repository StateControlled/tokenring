William Berthouex
CSC536 Distributed Systems II
Final Project: Distributed Ticket Sale Application

Server
The Server reads in a list of Events from disk then starts a Master actor and passes the list to them. It also handles
command line input which can either list information about events on sale or shut down the system (gracefully).

System operation
The Master actor creates the nodes of the token ring, connects them together, then distributes chunks of tickets to each.
It holds unallocated chunks in reserve.
Each node (kiosk) holds a reference to its neighbor in the ring and to the Master actor.
When a Kiosk runs out of tickets, it will ask the Master for more.
If the Master has record that the event is sold out, it will tell the Kiosk, else it will send a request for more tickets
around the ring. The first Kiosk to receive the message that has tickets will send a portion of its tickets to the Kiosk
that made the initial request.
The Master periodically sends a message around the ring to check sales. Kiosks will indicate if they have no tickets remaining for an Event.
If all clients report no tickets available, then the Master saves this information in itself. Any future requests for tickets will
receive a "Sold Out" notification so the Kiosk can also mark the event as sold out.

The system is set up using Scala's Cluster system which allows nodes to join and leave the system in an orderly manner and a one-for-one supervisor strategy
allows the Master to restart failed nodes. This allows the system to recover from errors in individual nodes.
The Kiosks can operate relatively independently unless they need tickets.
Weakness: If the Master crashes, the whole system will go down.

Client
A client will connect to a Kiosk to purchase a ticket for an event and a command line interface allows a user to interact and send messages/commands.
The ticket purchasing functionality is the most essential, so the client will send a purchase query to a kiosk and then
wait for a response, but other operations are fire and forget. This is to ensure the core functionality of the client is always reliable
- reliable in the sense that it always returns some result even if the result is a "failure" message.
After a certain amount of time, the operation can time out and fail if the Kiosk does not respond. The client will then select another
kiosk to connect to so the next attempt may succeed unless the Kiosk returns an "Event Sold Out" message.
The client also stores a list of successful orders and can print to console or save these to disk if desired.
